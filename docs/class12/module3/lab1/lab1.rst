Kubernetes Troubleshooting
==========================

Throughout this class you have used several first step methods in troubleshooting. Using *get* and *describe* help start the process, but what if they do not provide 
enough detail to lead you to the problem? In this lab we'll show you some additional commands you can use to get information, or configure all the objects in your cluster.

Let's start with the *explain* command. Kubernetes explain command provides documentation of the resource or specific field of the resource. In past labs, you used 
imperative commands to create pods but we only covered the fields used. You can find reference to all object right from the cli.

Example:

.. code-block:: bash
   :caption: Explain

   kubectl explain <resource>

Now, let's *walk* some parts of the pod resource. This command will show the fields available to you to configure a pod.

.. code-block:: bash 
   :caption: Explain Pod

   kubectl explain pod

But what details are available under *metadata*.

.. code-block:: bash
   :caption: Pod Meta


   kubectl explain pod.metadata

As you can see from the output, the *name* field is required when declaring a pod.

Kubernetes *describe* shows details of a specific resource or group of resources.This command joins many API calls together to form a detailed description of 
a given resource or group of resources. This command you have run several times during this class to find detailed information on your deployed resources.

.. code-block:: bash 
   :caption: Describe

   kubectl describe <resource_type> <resource_name> -n <namespace>

Kubernetes #events* can provide valuable insights to events from controllers, schedulers, pods and nodes. You can, and should, filter down events.

.. code-block:: bash 
   :caption: Filter Namespace

   kubectl get events -n test

Get live events:

.. code-block:: bash 
   :caption: Filter Follow

   kubectl get events -n test --watch

Filter events by *namespace* and resource type.

.. code-block:: bash 
   :caption: Filter Pod

   kubectl get events -n test ---field-selector involvedObject.kind=Pod

Filter events by namespace, resource type, and pod name.

.. code-block:: bash 
   :caption: Filter Pod

   kubectl get events -n test --field-selector involvedObject.kind=Pod --field-selector involvedObject.name=testpod

The *logs* command allows you to view logs generated by a pod. You have a run a similar command in the Container lab. In these two steps you'll view logs in a single pod
and all pod logs from the deployment.

.. code-block:: bash 
   :caption: Pod Logs

   kubectl logs testpod -n test

Deployment logs:

.. code-block:: bash
   :caption: Deployment Logs

   kubectl logs deploy/lab-deploy -n test

You can connect to the shell of a running pod by using the below command. 

.. code-block:: bash 
   :caption: Shell Single Container

   kubectl exec -it <pod_name> -n <namespace> -- /bin/bash

Example for multi-container pod:

.. code-block:: bash 
   :caption: Shell Multi-Container

   kubectl exec -it <pod_name> -c <container_name> -n <namespace> -- /bin/bash

For this next Troubleshooting exercise you'll deploy a special *dnsutils* container image. This container has *dnsutils* installed and will allow to view how services are
registered in CoreDNS.

.. code-block:: bash
   :caption: DNSUTILS

   kubectl run dnsutils --image=registry.k8s.io/e2e-test-images/jessie-dnsutils:1.3 --restart=Always -n test -- /bin/bash -c "sleep infinity"

Once deployed and running, you can execute *dig* commands from inside the cluster using the dnsutils tools.

.. code-block:: bash
   :caption: DNS dig

   kubectl exec -it dnsutils -n test -- dig lab-deploy-svc.test.svc.cluster.local