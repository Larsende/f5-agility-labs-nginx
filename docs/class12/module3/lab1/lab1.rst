Kubernetes Troubleshooting
==========================

You can use the *explain* command to get documentation of the resource or specific field of the resource.

.. code-block:: bash
   :caption: Explain

   kubectl explain <resource>

Kubernetes *describe* Show details of a specific resource or group of resources.This command joins many API calls together to form a detailed description of 
a given resource or group of resources.

.. code-block:: bash 
   :caption: Describe

   kubectl describe <resource_type> <resource_name> -n <namespace>

Kubernetes #events* can provide valuable insights to events from controllers, schedulers, pods and nodes. 

.. code-block:: bash 
   :caption: Events

   kubectl get events -n <namespace>

The *logs* command allows you to view logs generated by a pod.

.. code-block:: bash 
   :caption: Logs

   kubectl logs <pod_name> -n <namespace>

You can connect to the shell of a running pod by using the below command. This command is for a pod running a single container.

.. code-block:: bash 
   :caption: Shell Single Container

   kubectl exec -it <pod_name> -n <namespace> -- /bin/bash

.. code-block:: bash 
   :caption: Shell Multi-Container

   kubectl exec -it <pod_name> -c <container_name> -n <namespace> -- /bin/bash

For this next Troubleshooting exercise you'll deploy a special *dnsutils* container image.

.. code-block:: bash
   :caption: DNSUTILS

   kubectl run dnsutils --image=registry.k8s.io/e2e-test-images/jessie-dnsutils:1.3 --restart=Always -n test -- /bin/bash -c "sleep infinity"

Once deployed and running, you can execute *dig* commands from inside the cluster using the dnsutils tools.

.. code-block:: bash
   :caption: DNS dig

   kubectl exec -it dnsutils -n test -- dig lab-deploy-svc.test.svc.cluster.local